---
- name: Ensure server ready and waiting connections
  hosts: all
  gather_facts: False
  tasks:
    - name: Wait 180 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        delay: 10
        timeout: 180
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        search_regex: OpenSSH
      vars:
        #run this on localhost to each remotehost taken as parameter
        ansible_connection: local
        # ACTS ON LOCAL!! so no need....
        #use default python in case python3 is missing
        #ansible_python_interpreter: /usr/bin/python

- name: Update repos and install docker and stuff on remote host
  hosts: all
  become: yes
  tasks:
    - name: Update all packages
      ansible.builtin.yum:
        name: "*"
        state: latest
        update_only: yes
    - name: Ensure net-tools, acl, docker and docker-compose are installed
      # we can choose interpreter at task level.
      # install python3 by using python2, in case python3 is missing
      # not needed here, as ec2 linux2 instances now have python3 by default
      #
      # Install ACL to host, to resolve Becoming an Unprivileged User,
      # when trying to start apps as ec2-user
      # vars:
      #   ansible_python_interpreter: /usr/bin/python
      ansible.builtin.yum:
        name:
          - net-tools
          - acl
          - docker
        state: present
        update_cache: yes
    # service module is a proxy for multiple more specific service manager modules
    # (such as ansible.builtin.systemd and ansible.builtin.sysvinit)
    - name: Start docker and Enable Docker service at startup
      service:
        name: docker
        state: started
        enabled: yes
    - name: Ensure docker-compose standalone is installed on the server
      ansible.builtin.get_url:
        # using Jinja2 builtin plugin lookup to get system architecture with 'uname -m'
        url: https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-{{lookup('pipe', 'uname -m')}}
        dest: /usr/local/bin/docker-compose
        mode: +x
    #install docker python to use ansible.community docker modules
    - name: Ensure docker python module is installed
      ansible.builtin.pip:
        name:
          - docker
          - docker-compose

- name: Create new linux user
  hosts: all
  become: yes
  tasks:
    # add ec2-user to docker group to run docker commands without sudo
    # prefer user module instead of shell module
    # append so we don't remove user from other groups
    # ec2 has adm group, ubuntu has admin
    - name: Create user to run containers
      user:
        name: mlt
        groups: adm, docker
        append: yes
    # no need for user logout/login to refresh groups, as we now create the user and groups
    # # reset connection so ec2-user gets the newly assigned group
    # - name: Reconnect to server
    #   meta: reset_connection

    # Upgrade pip3
    # - name: Upgrade pip3
    #   shell: "python3 -m pip install pip --upgrade"

- name: Docker pull image and run container with compose
  hosts: all
  become: True
  become_user: mlt
  # vars_prompt:
  # - name: password
  #   prompt: What is your password?
  vars_files: project-vars
  tasks:
    - name: Login to docker private repo
      community.docker.docker_login:
        registry_url: https://index.docker.io/v1/miltosdev/my-private-repo
        username: miltosdev
        password: "{{docker_pass}}"

    # Not needed. compose pulls not present images by default
    - name: Pull image from private repo
      community.docker.docker_image:
        name: miltosdev/my-private-repo:jma2-v-1.0.0
        source: pull
        # Select platform for pulling. If not specified, will pull whatever docker prefers.
        pull:
          platform: amd64

    - name: Copy docker-compose.yml to server
      ansible.builtin.copy:
        src: /home/mltamd/learn/ansible/learn-ansible/docker-compose.yml
        dest: /home/mlt/docker-compose.yml
        # owner: ec2-user
        # group: ec2-user

    - name: Start containers with compose
      community.docker.docker_compose:
        project_src: /home/mlt/
        state: present

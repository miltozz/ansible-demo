---
- name: Install nexus preqs - java and net-tools
  hosts: nexus
  become: yes
  tasks:
    - name: Update repos, install java-8
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        name: openjdk-8-jre-headless
        state: present
    - name: Install net-tools
      ansible.builtin.apt:
        name: net-tools
        state: present

- name: Download and unpack Nexus 3
  hosts: nexus
  become: yes
  vars_files:
    - project-vars
  tasks:
    # Download nexus on the server, unpack in /opt
    #
    # CONCEPT DEMONSTRATION: Use a registered var in a task to reference something in the next task.
    #  Here it could be an alternative method as follows:
    #  1) use ger_url module to download nexus installer file in /opt.  url:<src> dest:<path>
    #  1b) problem: latest version changes often. which version we use in the unarchive, src field?
    #  2) solution: register the download_result var, and use it in unarchive as source, to
    #     reference the downloaded file and version as {{download_result.dest}}
    - name: Copy and unpack on server
      unarchive:
        src: https://download.sonatype.com/nexus/3/latest-unix.tar.gz
        dest: /opt
        remote_src: yes

    # following modules are for demonstrating concepts.
    # Renaming the folder could very well be skipped

    #demonstrate find module. find nexus directory and rename it
    - name: Find Nexus directory
      find:
        paths: /opt
        pattern: "nexus-*"
        file_type: directory
      register: find_result
    - debug: msg={{find_result}}

    # use status module. check if exists or other status info
    - name: Check if Nexus directory exists
      stat:
        path: /opt/nexus
      register: stat_result
    - debug: msg={{stat_result.stat.exists}}

    # conditionals with when.
    - name: Rename Nexus directory
      shell: mv {{find_result.files[0].path}} /opt/nexus/
      when: not stat_result.stat.exists

- name: Create nexus user and permissions
  hosts: nexus
  become: yes
  vars_files:
    - project-vars
  tasks:
    - name: Create group nexus
      ansible.builtin.group:
        name: nexus
        state: present
    - name: Create user nexus
      ansible.builtin.user:
        name: nexus
        group: nexus
        shell: /bin/bash
    # use of find and then use builtin command or shell could be used to
    # find the nexus-30.0.1 folder, register it, and then use it to chown.
    # but it is considered bad practice as ansible has no control over them
    # and breaks idempotency.
    # try to use modules when possible
    # thus, we use file module to chown
    - name: Use file module to make nexus owner of nexus folder
      ansible.builtin.file:
        path: /opt/nexus
        state: directory
        owner: nexus
        group: nexus
        recurse: yes
    - name: Use file module to make nexus owner of sonatype-work folder
      ansible.builtin.file:
        path: /opt/sonatype-work
        state: directory
        owner: nexus
        group: nexus
        recurse: yes

    #alternate method with find and dynamic folder name, using file and not command or shell
    # - name: Find Nexus directory again
    #   find:
    #     paths: /opt
    #     pattern: "nexus-*"
    #     file_type: directory
    #   register: find_result
    # - debug: msg={{find_result}}

    # NEEDS when for directory exists?? 
    # - name: Use file module to make nexus owner of nexus-30-blah-blah folder
    #   ansible.builtin.file:
    #     path: "{{find_result.files[0].path}}"
    #     state: directory
    #     owner: nexus
    #     group: nexus
    #     recurse: yes
